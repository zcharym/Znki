definitions:
  db.Card:
    properties:
      created_at:
        type: string
      deck_id:
        type: string
      due:
        type: string
      efactor:
        type: number
      id:
        type: string
      interval:
        type: integer
      note:
        $ref: '#/definitions/db.Note'
      note_id:
        type: string
      reviews:
        type: integer
      status:
        type: string
      tag:
        $ref: '#/definitions/db.Tag'
      tag_id:
        type: string
      tittle:
        type: string
      updated_at:
        type: string
    type: object
  db.Deck:
    properties:
      created_at:
        type: string
      desc:
        type: string
      id:
        type: string
      is_public:
        type: boolean
      name:
        type: string
      pid:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  db.Note:
    properties:
      card_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  db.Tag:
    properties:
      cid:
        type: string
      created_at:
        type: string
      id:
        type: string
      key:
        type: string
      updated_at:
        type: string
    type: object
  handler.IdSet:
    properties:
      id_set:
        items:
          type: string
        type: array
    type: object
  handler.LoginParam:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  handler.RegisterParam:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
info:
  contact:
    email: zcharyma@gmail.com
    name: Zchary
    url: https://github.com/zchary-ma
  description: Znki API documentation
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Znki API doc
  version: "0.1"
paths:
  /cards:
    post:
      consumes:
      - application/json
      description: usually get cards by deck id
      parameters:
      - description: card info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.Card'
      - description: "0"
        in: query
        name: skip
        required: true
        type: number
      - description: "20"
        in: query
        name: take
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"success"}'
          schema:
            type: string
      summary: usually get cards by deck id
      tags:
      - Card
    put:
      consumes:
      - application/json
      description: update card
      parameters:
      - description: card info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.Card'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"success"}'
          schema:
            type: string
      summary: update card
      tags:
      - Card
  /cards/{id}:
    get:
      consumes:
      - application/json
      description: get card by card id
      parameters:
      - description: Card ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"success"}'
          schema:
            type: string
      summary: get card by card id
      tags:
      - Card
  /cards/add:
    post:
      consumes:
      - application/json
      description: create card
      parameters:
      - description: card info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.Card'
      produces:
      - application/json
      responses:
        "201":
          description: '{"code":200,"data":{},"msg":"success"}'
          schema:
            type: string
      summary: create card
      tags:
      - Card
  /cards/delete:
    post:
      consumes:
      - application/json
      description: batch remove cards
      parameters:
      - description: card ids
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.IdSet'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"success"}'
          schema:
            type: string
      summary: batch remove cards
      tags:
      - Card
  /cards/review:
    put:
      consumes:
      - application/json
      description: review card
      parameters:
      - description: card info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.Card'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"success"}'
          schema:
            type: string
      summary: review card
      tags:
      - Card
  /decks:
    get:
      consumes:
      - application/json
      description: get deck list
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
      summary: get deck list
      tags:
      - Deck
  /decks/{id}:
    delete:
      consumes:
      - application/json
      description: delete deck by deck id
      parameters:
      - description: Deck ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
      summary: delete deck by deck id
      tags:
      - Deck
  /decks/add:
    post:
      consumes:
      - application/json
      description: create deck
      parameters:
      - description: deck info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.Deck'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"success"}'
          schema:
            type: string
      summary: create deck
      tags:
      - Deck
  /login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: user info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.LoginParam'
      produces:
      - application/json
      responses:
        "201":
          description: '{"code":200,"data":{},"msg":"success"}'
          schema:
            type: string
      summary: login
      tags:
      - auth
  /logout:
    post:
      consumes:
      - application/json
      description: logout
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"success"}'
          schema:
            type: string
      summary: logout
      tags:
      - auth
  /refresh:
    post:
      consumes:
      - application/json
      description: logout
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"success"}'
          schema:
            type: string
      summary: logout
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: user register
      parameters:
      - description: user info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterParam'
      produces:
      - application/json
      responses:
        "201":
          description: '{"code":200,"data":{},"msg":"success"}'
          schema:
            type: string
      summary: list decks from user
      tags:
      - auth
  /tags:
    get:
      consumes:
      - application/json
      description: create tag
      parameters:
      - description: card_id
        in: query
        name: card_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"success"}'
          schema:
            type: string
      summary: create tag
      tags:
      - Tag
  /tags/{id}:
    delete:
      consumes:
      - application/json
      description: remove tag
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"success"}'
          schema:
            type: string
      summary: remove tag
      tags:
      - Tag
    put:
      consumes:
      - application/json
      description: edit tag
      parameters:
      - description: tag info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.Tag'
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"success"}'
          schema:
            type: string
      summary: edit tag
      tags:
      - Tag
  /tags/add:
    post:
      consumes:
      - application/json
      description: create tag
      parameters:
      - description: tag info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.Tag'
      produces:
      - application/json
      responses:
        "201":
          description: '{"code":200,"data":{},"msg":"success"}'
          schema:
            type: string
      summary: create tag
      tags:
      - Tag
  /user:
    put:
      consumes:
      - application/json
      description: update user info
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"success"}'
          schema:
            type: string
      summary: update user info
      tags:
      - User
swagger: "2.0"
